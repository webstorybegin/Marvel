{"version":3,"file":"static/js/368.66c5e73a.chunk.js","mappings":"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","sources":["components/ComicsList/SingleComicPage/SingleComicPage.tsx","components/ErrorMessage/ErrorMessage.tsx","services/useMarvelService.tsx","hooks/http.hook.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { useMarvelService } from \"../../../services/useMarvelService\";\r\nimport { ErrorMessage } from \"../../ErrorMessage/ErrorMessage\";\r\n\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Spinner } from \"../../ui/Spinner/Spinner\";\r\n\r\nconst useStyles = makeStyles({\r\n  text: {\r\n    \"& p\": {\r\n      marginBottom: 20,\r\n    },\r\n    \"& a\": {\r\n      width: 100,\r\n      padding: 15,\r\n      background: \"red\",\r\n      borderRadius: 10,\r\n      color: \"#fff\",\r\n      fontSize: 14,\r\n      textAlign: \"center\",\r\n    },\r\n  },\r\n});\r\n\r\nconst SingleComicPage = () => {\r\n  const [comic, setComic] = useState(null);\r\n  const { comicId } = useParams();\r\n  const { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updComic();\r\n  }, [comicId]);\r\n\r\n  const updComic = () => {\r\n    if (!comicId) {\r\n      return;\r\n    }\r\n\r\n    clearError();\r\n    getComic(comicId).then(onComicLoaded);\r\n  };\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n\r\n  return (\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({ comic }: any) => {\r\n  const { title, description, thumbnail, pageCount, language } = comic;\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.text}>\r\n      <img style={{ width: 325, height: 445 }} src={thumbnail} />\r\n      <h1>{title}</h1>\r\n      <p>{description}</p>\r\n      <p>Pages: {pageCount}</p>\r\n      <p>Language: {language}</p>\r\n      <Link to=\"/comics\">Back to all</Link> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleComicPage;","/* eslint-disable spaced-comment */\r\n/// <reference types=\"react-scripts\" />\r\nimport errorImg from \"./error.gif\";\r\n\r\nexport const ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      alt=\"error\"\r\n      src={errorImg}\r\n    />\r\n  );\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nexport const useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=9312b916a65e5963f899dffa609ded63\";\r\n  const _baseOffSet = 210;\r\n  \r\n  const getAllCharacters = async (offset = _baseOffSet) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformChar);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformChar(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n}\r\n\r\nconst getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n}\r\n\r\nconst _transformChar = (char) => {\r\n    return {\r\n        id: char.id,\r\n        name: char.name,\r\n        description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n        homepage: char.urls[0].url,\r\n        wiki: char.urls[1].url,\r\n        comics: char.comics.items\r\n    }\r\n}\r\n\r\nconst _transformComics = (comics) => {\r\n    return {\r\n        id: comics.id,\r\n        title: comics.title,\r\n        description: comics.description || 'There is no description',\r\n        pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n        thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n        language: comics.textObjects.language || 'en-us',\r\n        price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n    }\r\n}\r\n\r\nreturn {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic}\r\n}\r\n\r\n\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n      \r\n    } catch (error) {\r\n      setLoading(false);\r\n      setError(error.message);\r\n      throw error;\r\n    }\r\n\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, request, error, clearError}\r\n}"],"names":["useStyles","makeStyles","text","marginBottom","width","padding","background","borderRadius","color","fontSize","textAlign","View","comic","title","description","thumbnail","pageCount","language","classes","className","style","height","src","to","useState","setComic","comicId","useParams","useMarvelService","loading","error","getComic","clearError","useEffect","updComic","then","onComicLoaded","errorMessage","spinner","content","ErrorMessage","display","objectFit","margin","alt","errorImg","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformChar","getCharacter","id","getAllComics","_transformComics","char","name","slice","path","extension","homepage","urls","wiki","comics","items","textObjects","price","prices"],"sourceRoot":""}