{"version":3,"file":"static/js/451.a0385c1f.chunk.js","mappings":"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","sources":["components/MainPage/RandomChar/RandomChar.tsx","components/MainPage/CharList/CharList.tsx","components/MainPage/CharInfo/CharInfo.tsx","components/MainPage/MainPage.tsx"],"sourcesContent":["import { FC, useState, useEffect } from \"react\";\r\nimport { useMarvelService } from \"../../../services/useMarvelService\";\r\nimport { ErrorMessage } from \"../../ErrorMessage/ErrorMessage\";\r\nimport { Spinner } from \"../../ui/Spinner/Spinner\";\r\n\r\n\r\nimport mjolnir from \"../../../resources/img/mjolnir.png\";\r\n\r\nimport \"./randomChar.scss\";\r\n\r\ninterface IRandomChar {\r\n  readonly charId?: number\r\n}\r\n\r\nexport const RandomChar: FC<IRandomChar> = ({ charId }) => {\r\n  const [char, setChar] = useState({});\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updChar();\r\n  }, [charId]);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updChar = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id)\r\n      .then(onCharLoaded)\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error) ? <View char={char} /> : null;\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button onClick={updChar} className=\"button button__main\">\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { thumbnail, name, description, homepage, wiki } = char;\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a\r\n            href={homepage}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            className=\"button button__main\"\r\n          >\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a\r\n            href={wiki}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            className=\"button button__secondary\"\r\n          >\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Spinner } from \"../../ui/Spinner/Spinner\";\r\nimport { ErrorMessage } from \"../../ErrorMessage/ErrorMessage\";\r\nimport { useMarvelService } from \"../../../services/useMarvelService\";\r\n\r\nimport \"./charList.scss\";\r\n\r\nexport const CharList = ({ onCharSelected }) => {\r\n  const [charList, setCharList] = useState([] as any);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters(offset).then(onCharListLoaded);\r\n  };\r\n\r\n  const onCharListLoaded = (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n\r\n    setCharList((charList) => [...charList, ...newCharList]);\r\n    setNewItemLoading(false);\r\n    setOffset((offset) => offset + 9);\r\n    setCharEnded((charEnded) => ended);\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item) => {\r\n      return (\r\n        <li\r\n          tabIndex={0}\r\n          className=\"char__item\"\r\n          key={item.id}\r\n          onClick={() => onCharSelected(item.id)}\r\n        >\r\n          <img src={item.thumbnail} alt={item.name} />\r\n          <div className=\"char__name\">{item.name}</div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return <ul className=\"char__grid\">{items}</ul>;\r\n  }\r\n\r\n  const items = renderItems(charList);\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {items}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        disabled={newItemLoading}\r\n        style={{ display: charEnded ? \"none\" : \"block\" }}\r\n        onClick={() => onRequest(offset, false)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { useMarvelService } from \"../../../services/useMarvelService\";\r\nimport { Spinner } from \"../../ui/Spinner/Spinner\";\r\nimport { ErrorMessage } from \"../../ErrorMessage/ErrorMessage\";\r\nimport Skeleton from \"../../ui/Skeleton/Skeleton\";\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nexport const CharInfo = ({ charId }) => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updChar();\r\n  }, [charId]);\r\n\r\n  const updChar = () => {\r\n    if (!charId) {\r\n      return;\r\n    }\r\n\r\n    clearError();\r\n    getCharacter(charId).then(onCharLoaded);\r\n  };\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const skeleton = char || loading || error ? null : <Skeleton />;\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt=\"abyss\" />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} rel=\"noreferrer\" className=\"button button__main\">\r\n              <div className=\"inner\">Homepage</div>\r\n            </a>\r\n            <a href={wiki} className=\"button button__secondary\">\r\n              <div className=\"inner\">Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.lenght > 0 ? null : \"There is no comics with this character\"}\r\n        {comics.map((item, index) => {\r\n          // eslint-disable-next-line\r\n          if (item > 9) return;\r\n          return (\r\n            <li key={index} className=\"char__comics-item\">\r\n              {item.name}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { RandomChar } from \"./RandomChar\";\r\nimport { CharList } from \"./CharList\";\r\nimport { CharInfo } from \"./CharInfo\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport \"./mainPage.scss\";\r\n\r\nconst MainPage = () => {\r\n  const [char, setChar] = useState(null);\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <RandomChar />\r\n      <div className=\"char__content\">\r\n        <CharList onCharSelected={onCharSelected} />\r\n        <CharInfo charId={char} />\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;"],"names":["RandomChar","charId","useState","char","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","View","className","onClick","src","mjolnir","alt","thumbnail","name","description","homepage","wiki","href","target","rel","CharList","onCharSelected","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","items","arr","map","item","tabIndex","renderItems","disabled","style","display","CharInfo","skeleton","Skeleton","comics","lenght","index","decoration"],"sourceRoot":""}